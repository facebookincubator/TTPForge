/*
Copyright Â© 2024-present, Meta Platforms, Inc. and affiliates
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package blocks

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/exec"
	"regexp"
	"strings"
	"time"

	"github.com/facebookincubator/ttpforge/pkg/logging"
	"github.com/facebookincubator/ttpforge/pkg/outputs"
	expect "github.com/l50/go-expect"
	"go.uber.org/zap"
)

// ExpectStep represents an expect command.
//
// **Attributes:**
//
// Chdir: Directory to change to before executing the command.
// Responses: List of expected prompts and responses.
// Timeout: Timeout duration for the expect command.
// Executor: Shell to use for executing the command.
// Environment: Environment variables for the command.
// Inline: Inline script to execute.
// CleanupStep: Command to run for cleanup after execution.
// Outputs: Outputs generated by the command.
type ExpectStep struct {
	actionDefaults `yaml:",inline"`
	Chdir          string                  `yaml:"chdir,omitempty"`
	Responses      []Response              `yaml:"responses,omitempty"`
	Timeout        int                     `yaml:"timeout,omitempty"`
	Executor       string                  `yaml:"executor,omitempty"`
	Environment    map[string]string       `yaml:"env,omitempty"`
	Inline         string                  `yaml:"inline"`
	CleanupStep    string                  `yaml:"cleanup,omitempty"`
	Outputs        map[string]outputs.Spec `yaml:"outputs,omitempty"`
}

// Response represents a prompt-response pair.
//
// **Attributes:**
//
// Prompt: The expected prompt to match.
// Response: The response to send when the prompt is matched.
type Response struct {
	Prompt   string `yaml:"prompt"`
	Response string `yaml:"response"`
}

// NewExpectStep creates a new ExpectStep instance.
//
// **Returns:**
//
// *ExpectStep: A pointer to the newly created ExpectStep.
func NewExpectStep() *ExpectStep {
	return &ExpectStep{}
}

// IsNil checks if the step is nil or empty and returns a boolean value.
//
// **Returns:**
//
// bool: True if the step is nil or empty, false otherwise.
func (s *ExpectStep) IsNil() bool {
	return s.Inline == "" && len(s.Responses) == 0
}

// Validate validates the step, checking for the necessary attributes and
// dependencies.
//
// **Parameters:**
//
// execCtx: The execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// error: An error if validation fails.
func (s *ExpectStep) Validate(execCtx TTPExecutionContext) error {
	if len(s.Responses) == 0 {
		err := errors.New("responses must be provided")
		logging.L().Error(zap.Error(err))
		return err
	}

	if s.Inline == "" {
		err := errors.New("inline must be provided")
		logging.L().Error(zap.Error(err))
		return err
	}

	if s.Executor == "" && s.Inline != "" {
		logging.L().Debug("defaulting to bash since executor was not provided")
		s.Executor = ExecutorBash
	}

	if s.Executor == ExecutorBinary {
		return nil
	}

	if _, err := exec.LookPath(s.Executor); err != nil {
		logging.L().Error(zap.Error(err))
		return err
	}

	logging.L().Debugw("command found in path", "executor", s.Executor)
	return nil
}

// Execute runs the step and returns an error if one occurs.
//
// **Parameters:**
//
// execCtx: The execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// *ActResult: A pointer to the action result.
// error: An error if execution fails.
func (s *ExpectStep) Execute(execCtx TTPExecutionContext) (*ActResult, error) {
	if s == nil {
		return nil, fmt.Errorf("expectStep is nil")
	}

	originalDir, err := os.Getwd()
	if err != nil {
		return nil, fmt.Errorf("failed to get current directory: %w", err)
	}
	defer func() {
		if err := os.Chdir(originalDir); err != nil {
			fmt.Printf("failed to change back to original directory: %v\n", err)
		}
	}()

	if s.Chdir != "" {
		if err := os.Chdir(s.Chdir); err != nil {
			return nil, fmt.Errorf("failed to change directory: %w", err)
		}
	}

	console, err := expect.NewConsole(expect.WithStdout(os.Stdout), expect.WithStdin(os.Stdin))
	if err != nil {
		return nil, fmt.Errorf("failed to create new console: %w", err)
	}
	defer console.Close()

	envAsList := os.Environ()
	cmd := s.prepareCommand(context.Background(), execCtx, envAsList, s.Inline)
	cmd.Stdin = console.Tty()
	cmd.Stdout = console.Tty()
	cmd.Stderr = console.Tty()

	if err := cmd.Start(); err != nil {
		return nil, fmt.Errorf("failed to start command: %w", err)
	}

	done := make(chan error, 1)
	go func() {
		for _, response := range s.Responses {
			re := regexp.MustCompile(response.Prompt)
			if _, err := console.Expect(expect.Regexp(re)); err != nil {
				done <- fmt.Errorf("failed to expect %q: %w", re, err)
				return
			}
			if _, err := console.SendLine(response.Response); err != nil {
				done <- fmt.Errorf("failed to send response: %w", err)
				return
			}
		}
		// Close the console to send EOF
		console.Tty().Close()
		done <- nil
	}()

	timeout := 30 * time.Second
	if s.Timeout != 0 {
		timeout = time.Duration(s.Timeout) * time.Second
	}

	select {
	case err := <-done:
		if err != nil {
			return nil, fmt.Errorf("error in expect: %w", err)
		}
	case <-time.After(timeout):
		return nil, fmt.Errorf("timeout waiting for expect")
	}

	if err := cmd.Wait(); err != nil {
		return nil, fmt.Errorf("command wait failed: %w", err)
	}

	if _, err := console.ExpectEOF(); err != nil {
		return nil, fmt.Errorf("failed to expect EOF: %w", err)
	}

	return &ActResult{}, nil
}

// prepareCommand prepares the command to be executed.
//
// **Parameters:**
//
// ctx: Context for the command execution.
// execCtx: Execution context containing environment variables and working
// directory.
// envAsList: List of environment variables.
// inline: Inline script to be executed.
//
// **Returns:**
//
// *exec.Cmd: The prepared command.
func (s *ExpectStep) prepareCommand(ctx context.Context, execCtx TTPExecutionContext, envAsList []string, inline string) *exec.Cmd {
	cmd := exec.CommandContext(ctx, s.Executor, "-c", inline)
	cmd.Env = envAsList
	cmd.Dir = execCtx.WorkDir
	cmd.Stdin = strings.NewReader(inline) // Use inline as the command input
	return cmd
}

// Cleanup runs the cleanup command if specified.
//
// **Parameters:**
//
// execCtx: Execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// *ActResult: A pointer to the action result.
// error: An error if cleanup fails.
func (s *ExpectStep) Cleanup(execCtx TTPExecutionContext) (*ActResult, error) {
	if s.CleanupStep == "" {
		return &ActResult{}, nil
	}

	envAsList := os.Environ()
	cmd := s.prepareCommand(context.Background(), execCtx, envAsList, s.CleanupStep)

	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		return nil, fmt.Errorf("failed to run cleanup command: %w", err)
	}

	return &ActResult{}, nil
}

// CanBeUsedInCompositeAction enables this action to be used in a composite
// action.
//
// **Returns:**
//
// bool: True if the action can be used in a composite action.
func (s *ExpectStep) CanBeUsedInCompositeAction() bool {
	return true
}
