/*
Copyright Â© 2024-present, Meta Platforms, Inc. and affiliates
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package blocks

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"regexp"
	"time"

	"github.com/Netflix/go-expect"
	"github.com/facebookincubator/ttpforge/pkg/logging"
	"github.com/facebookincubator/ttpforge/pkg/outputs"
	"go.uber.org/zap"
)

// ExpectStep represents an expect command.
//
// **Attributes:**
//
// Chdir: Directory to change to before executing the command.
// Responses: List of expected prompts and responses.
// Timeout: Timeout duration for the expect command.
// Executor: Shell to use for executing the command.
// Environment: Environment variables for the command.
// Inline: Inline script to execute.
// CleanupStep: Command to run for cleanup after execution.
// Outputs: Outputs generated by the command.
type ExpectStep struct {
	actionDefaults `yaml:",inline"`
	Chdir          string                  `yaml:"chdir,omitempty"`
	Timeout        int                     `yaml:"timeout,omitempty"`
	Executor       string                  `yaml:"executor,omitempty"`
	Expect         *ExpectSpec             `yaml:"expect,omitempty"`
	Environment    map[string]string       `yaml:"env,omitempty"`
	CleanupStep    string                  `yaml:"cleanup,omitempty"`
	Outputs        map[string]outputs.Spec `yaml:"outputs,omitempty"`
}

// ExpectSpec represents the expect block in the expect step.
//
// **Attributes:**
//
// Inline: Inline script to execute.
// Responses: List of expected prompts and responses.
type ExpectSpec struct {
	Inline    string     `yaml:"inline"`
	Responses []Response `yaml:"responses"`
}

// Response represents a prompt-response pair.
//
// **Attributes:**
//
// Prompt: The expected prompt to match.
// Response: The response to send when the prompt is matched.
type Response struct {
	Prompt   string `yaml:"prompt"`
	Response string `yaml:"response"`
}

// NewExpectStep creates a new ExpectStep instance.
//
// **Returns:**
//
// *ExpectStep: A pointer to the newly created ExpectStep.
func NewExpectStep() *ExpectStep {
	return &ExpectStep{}
}

// IsNil checks if the step is nil or empty and returns a boolean value.
//
// **Returns:**
//
// bool: True if the step is nil or empty, false otherwise.
func (s *ExpectStep) IsNil() bool {
	return s.Expect == nil || (s.Expect.Inline == "" && len(s.Expect.Responses) == 0)
}

// Validate validates the step, checking for the necessary attributes and
// dependencies.
//
// **Parameters:**
//
// execCtx: The execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// error: An error if validation fails.
func (s *ExpectStep) Validate(_ TTPExecutionContext) error {
	if s.Expect == nil {
		return fmt.Errorf("expectStep is nil")
	}

	if len(s.Expect.Responses) == 0 {
		return fmt.Errorf("responses must be provided")
	}

	if s.Expect.Inline == "" {
		return fmt.Errorf("inline must be provided")
	} else if s.Executor == "" {
		s.Executor = "bash"
	}

	if _, err := exec.LookPath(s.Executor); err != nil {
		return fmt.Errorf("executor not found: %w", err)
	}

	return nil
}

// Execute runs the step and returns an error if one occurs.
//
// **Parameters:**
//
// execCtx: The execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// *ActResult: A pointer to the action result.
// error: An error if execution fails.
func (s *ExpectStep) Execute(execCtx TTPExecutionContext) (*ActResult, error) {
	if s == nil || s.Expect == nil {
		return nil, fmt.Errorf("expect block must be provided")
	}

	originalDir, err := os.Getwd()
	if err != nil {
		return nil, fmt.Errorf("failed to get current directory: %w", err)
	}
	if err := s.Validate(execCtx); err != nil {
		return nil, err
	}
	defer func() {
		if err := os.Chdir(originalDir); err != nil {
			fmt.Printf("failed to change back to original directory: %v\n", err)
		}
	}()

	if s.Chdir != "" {
		if err := os.Chdir(s.Chdir); err != nil {
			return nil, fmt.Errorf("failed to change directory: %w", err)
		}
	}

	console, err := expect.NewConsole(expect.WithStdout(os.Stdout), expect.WithStdin(os.Stdin))
	if err != nil {
		return nil, fmt.Errorf("failed to create new console: %w", err)
	}
	defer console.Close()

	if s.Environment != nil {
		for k, v := range s.Environment {
			if err := os.Setenv(k, v); err != nil {
				return nil, fmt.Errorf("failed to set environment variable: %w", err)
			}
		}
	}

	envAsList := os.Environ()
	cmd := s.prepareCommand(context.Background(), execCtx, envAsList, s.Expect.Inline)
	cmd.Stdin = console.Tty()
	cmd.Stdout = console.Tty()
	cmd.Stderr = console.Tty()

	if err := cmd.Start(); err != nil {
		return nil, fmt.Errorf("failed to start command: %w", err)
	}

	done := make(chan error, 1)
	go func() {
		defer close(done)
		for _, response := range s.Expect.Responses {
			logging.L().Infof("Waiting for prompt: %s\n", response.Prompt)
			re := regexp.MustCompile(response.Prompt)
			timeout := 120 // Default timeout is 120 seconds
			if s.Timeout > 0 {
				timeout = s.Timeout // Use the provided timeout if it is greater than 0
			}
			matched, err := console.Expect(expect.Regexp(re), expect.WithTimeout(time.Duration(timeout)*time.Second))
			if err != nil {
				done <- fmt.Errorf("failed to expect %q: %w", re, err)
				return
			}
			logging.L().Infof("Matched prompt: %s\n", matched)
			logging.L().Infof("Sending response: %s\n", response.Response)
			if _, err := console.SendLine(response.Response); err != nil {
				done <- fmt.Errorf("failed to send response: %w", err)
				return
			}
		}

		logging.L().Info("Closing console TTY...")
		if err := console.Tty().Close(); err != nil {
			done <- fmt.Errorf("failed to close console Tty: %w", err)
			return
		}

		logging.L().Info("Waiting for command to exit...")
		if err := cmd.Wait(); err != nil {
			done <- fmt.Errorf("command failed: %w", err)
			return
		}
		done <- nil
	}()

	select {
	case err := <-done:
		if err != nil {
			return nil, err
		}
	case <-time.After(120 * time.Second):
		return nil, fmt.Errorf("command timed out")
	}

	if _, err := console.ExpectEOF(); err != nil {
		return nil, fmt.Errorf("failed to expect EOF: %w", err)
	}

	return &ActResult{}, nil
}

// prepareCommand prepares the command to be executed.
//
// **Parameters:**
//
// ctx: Context for the command execution.
// execCtx: Execution context containing environment variables and working
// directory.
// envAsList: List of environment variables.
// inline: Inline script to be executed.
//
// **Returns:**
//
// *exec.Cmd: The prepared command.
func (s *ExpectStep) prepareCommand(ctx context.Context, execCtx TTPExecutionContext, envAsList []string, inline string) *exec.Cmd {
	/* #nosec G204 */
	cmd := exec.CommandContext(ctx, s.Executor, "-c", inline)
	cmd.Env = envAsList
	cmd.Dir = execCtx.WorkDir

	return cmd
}

// Cleanup runs the cleanup command if specified.
//
// **Parameters:**
//
// execCtx: Execution context containing environment variables and working
// directory.
//
// **Returns:**
//
// *ActResult: A pointer to the action result.
// error: An error if cleanup fails.
func (s *ExpectStep) Cleanup(execCtx TTPExecutionContext) (*ActResult, error) {
	if s.CleanupStep == "" {
		return &ActResult{}, nil
	}

	logging.L().Info("Running cleanup step")

	envAsList := os.Environ()
	cmd := s.prepareCommand(context.Background(), execCtx, envAsList, s.CleanupStep)

	cmd.Stdout = os.Stdout
	cmd.Stdin = os.Stdin
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		logging.L().Error("Failed to run cleanup command", zap.Error(err))
		return nil, fmt.Errorf("failed to run cleanup command: %w", err)
	}

	logging.L().Info("Cleanup step completed successfully")
	return &ActResult{}, nil
}

// CanBeUsedInCompositeAction enables this action to be used in a composite
// action.
//
// **Returns:**
//
// bool: True if the action can be used in a composite action.
func (s *ExpectStep) CanBeUsedInCompositeAction() bool {
	return true
}
